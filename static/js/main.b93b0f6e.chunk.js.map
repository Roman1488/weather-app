{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","console","log","navigator","geolocation","target","elements","value","fetch","api_call","json","data","cod","setState","message","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"wTASeA,EAPA,kBACX,6BACI,wBAAIC,UAAU,0BAAd,kBACA,uBAAGA,UAAU,6BAAb,0BCKOC,EARF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDCMOC,EAVC,SAAAN,GAAK,OACnB,yBAAKF,UAAU,iBACTE,EAAMO,MAAQP,EAAMQ,SAAW,uBAAGV,UAAU,gBAAb,aAAsC,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMO,KAA1C,KAAoDP,EAAMQ,QAA1D,MACrER,EAAMS,aAAe,uBAAGX,UAAU,gBAAb,gBAAyC,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMS,YAA1C,YAC9DT,EAAMU,UAAY,uBAAGZ,UAAU,gBAAb,aAAsC,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMU,SAA1C,MACxDV,EAAMW,aAAe,uBAAGb,UAAU,gBAAb,eAAwC,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMW,YAA1C,MAC7DX,EAAMY,OAAS,uBAAGd,UAAU,kBAAmBE,EAAMY,SCHvDC,EAAU,mCAgFDC,E,2MA7EbC,MAAQ,CACJN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAEXd,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACTD,EAAEE,iBACFC,QAAQC,IAAIC,UAAUC,aAChBhB,EAAOU,EAAEO,OAAOC,SAASlB,KAAKmB,MAC9BlB,EAAUS,EAAEO,OAAOC,SAASjB,QAAQkB,MAJjC,SAKcC,MAAM,oDAAD,OAAqDpB,EAArD,YAA6DC,EAA7D,+BAA2FK,IAL9G,cAKHe,EALG,gBAMUA,EAASC,OANnB,OAMHC,EANG,OAOLvB,GAAQC,EACQ,KAAZsB,EAAKC,IACL,EAAKC,SAAS,CACVvB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAOkB,EAAKG,UAGhB,EAAKD,SAAS,CACVvB,YAAaqB,EAAKI,KAAKC,KACvB5B,KAAMuB,EAAK1B,KACXI,QAASsB,EAAKM,IAAI5B,QAClBE,SAAUoB,EAAKI,KAAKxB,SACpBC,YAAamB,EAAKO,QAAQ,GAAG1B,YAC7BC,MAAO,KAIf,EAAKoB,SAAS,CACVvB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,6BAlCN,4C,8HAwCX,OACI,6BACI,yBAAKd,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,yBACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,wBACX,kBAAC,EAAD,CAAMI,WAAYoC,KAAKpC,aACvB,kBAAC,EAAD,CACIO,YAAa6B,KAAKvB,MAAMN,YACxBF,KAAM+B,KAAKvB,MAAMR,KACjBC,QAAS8B,KAAKvB,MAAMP,QACpBE,SAAU4B,KAAKvB,MAAML,SACrBC,YAAa2B,KAAKvB,MAAMJ,YACxBC,MAAO0B,KAAKvB,MAAMH,kB,GAlEpC2B,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmB3B,WACrBA,UAAU4B,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b93b0f6e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder</h1>\r\n        <p className=\"title-container__subtitle\">Find out temperature</p>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n        <button>Get Weather</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n  <div className=\"weather__info\">\r\n      { props.city && props.country && <p className=\"weather__key\">Location: <span className=\"weather__value\"> { props.city }, { props.country } </span></p> }\r\n      { props.temperature && <p className=\"weather__key\">Temperature: <span className=\"weather__value\"> { props.temperature }&#8451; </span></p> }\r\n      { props.humidity && <p className=\"weather__key\">Humidity: <span className=\"weather__value\"> { props.humidity } </span></p> }\r\n      { props.description && <p className=\"weather__key\">Conditions: <span className=\"weather__value\"> { props.description } </span></p> }\r\n      { props.error && <p className=\"weather__error\">{ props.error }</p>}\r\n  </div>\r\n);\r\n\r\nexport default Weather;","import React from 'react';\r\nimport Titles from './components/Titles';\r\nimport Form from './components/Form';\r\nimport Weather from './components/Weather';\r\n\r\nconst API_KEY = 'f37794f9be31f924418625d7c1def8db';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n      temperature: undefined,\r\n      city: undefined,\r\n      country: undefined,\r\n      humidity: undefined,\r\n      description: undefined,\r\n      error: undefined\r\n  };\r\n  getWeather = async (e) => {\r\n      e.preventDefault();\r\n      console.log(navigator.geolocation);\r\n      const city = e.target.elements.city.value;\r\n      const country = e.target.elements.country.value;\r\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&APPID=${API_KEY}`);\r\n      const data = await api_call.json();\r\n      if (city && country) {\r\n          if (data.cod == 404) {\r\n              this.setState({\r\n                  temperature: undefined,\r\n                  city: undefined,\r\n                  country: undefined,\r\n                  humidity: undefined,\r\n                  description: undefined,\r\n                  error: data.message\r\n              });\r\n          } else {\r\n              this.setState({\r\n                  temperature: data.main.temp,\r\n                  city: data.name,\r\n                  country: data.sys.country,\r\n                  humidity: data.main.humidity,\r\n                  description: data.weather[0].description,\r\n                  error: \"\"\r\n              });\r\n          }\r\n      } else {\r\n          this.setState({\r\n              temperature: undefined,\r\n              city: undefined,\r\n              country: undefined,\r\n              humidity: undefined,\r\n              description: undefined,\r\n              error: \"Please, enter the value.\"\r\n          });\r\n      }\r\n\r\n  };\r\n  render() {\r\n    return (\r\n        <div>\r\n            <div className=\"wrapper\">\r\n                <div className=\"main\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-5 title-container\">\r\n                                <Titles/>\r\n                            </div>\r\n                            <div className=\"col-7 form-container\">\r\n                                <Form getWeather={this.getWeather}/>\r\n                                <Weather\r\n                                    temperature={this.state.temperature}\r\n                                    city={this.state.city}\r\n                                    country={this.state.country}\r\n                                    humidity={this.state.humidity}\r\n                                    description={this.state.description}\r\n                                    error={this.state.error}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}